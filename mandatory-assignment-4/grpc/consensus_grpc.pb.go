// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: grpc/consensus.proto

package consensus_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsensusService_CriticalSection_FullMethodName = "/consensus.ConsensusService/CriticalSection"
	ConsensusService_GetLamport_FullMethodName      = "/consensus.ConsensusService/GetLamport"
	ConsensusService_JoiningQueue_FullMethodName    = "/consensus.ConsensusService/JoiningQueue"
	ConsensusService_EnteringCS_FullMethodName      = "/consensus.ConsensusService/EnteringCS"
	ConsensusService_ExitingCS_FullMethodName       = "/consensus.ConsensusService/ExitingCS"
)

// ConsensusServiceClient is the client API for ConsensusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusServiceClient interface {
	CriticalSection(ctx context.Context, in *CriticalRequest, opts ...grpc.CallOption) (*CriticalReply, error)
	GetLamport(ctx context.Context, in *LamportRequest, opts ...grpc.CallOption) (*LamportReply, error)
	JoiningQueue(ctx context.Context, in *JoiningRequest, opts ...grpc.CallOption) (*JoiningReply, error)
	EnteringCS(ctx context.Context, in *EnteringCSRequest, opts ...grpc.CallOption) (*EnteringCSReply, error)
	ExitingCS(ctx context.Context, in *ExitingCSRequest, opts ...grpc.CallOption) (*ExitingCSReply, error)
}

type consensusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusServiceClient(cc grpc.ClientConnInterface) ConsensusServiceClient {
	return &consensusServiceClient{cc}
}

func (c *consensusServiceClient) CriticalSection(ctx context.Context, in *CriticalRequest, opts ...grpc.CallOption) (*CriticalReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CriticalReply)
	err := c.cc.Invoke(ctx, ConsensusService_CriticalSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) GetLamport(ctx context.Context, in *LamportRequest, opts ...grpc.CallOption) (*LamportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LamportReply)
	err := c.cc.Invoke(ctx, ConsensusService_GetLamport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) JoiningQueue(ctx context.Context, in *JoiningRequest, opts ...grpc.CallOption) (*JoiningReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoiningReply)
	err := c.cc.Invoke(ctx, ConsensusService_JoiningQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) EnteringCS(ctx context.Context, in *EnteringCSRequest, opts ...grpc.CallOption) (*EnteringCSReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnteringCSReply)
	err := c.cc.Invoke(ctx, ConsensusService_EnteringCS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ExitingCS(ctx context.Context, in *ExitingCSRequest, opts ...grpc.CallOption) (*ExitingCSReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitingCSReply)
	err := c.cc.Invoke(ctx, ConsensusService_ExitingCS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServiceServer is the server API for ConsensusService service.
// All implementations must embed UnimplementedConsensusServiceServer
// for forward compatibility.
type ConsensusServiceServer interface {
	CriticalSection(context.Context, *CriticalRequest) (*CriticalReply, error)
	GetLamport(context.Context, *LamportRequest) (*LamportReply, error)
	JoiningQueue(context.Context, *JoiningRequest) (*JoiningReply, error)
	EnteringCS(context.Context, *EnteringCSRequest) (*EnteringCSReply, error)
	ExitingCS(context.Context, *ExitingCSRequest) (*ExitingCSReply, error)
	mustEmbedUnimplementedConsensusServiceServer()
}

// UnimplementedConsensusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsensusServiceServer struct{}

func (UnimplementedConsensusServiceServer) CriticalSection(context.Context, *CriticalRequest) (*CriticalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriticalSection not implemented")
}
func (UnimplementedConsensusServiceServer) GetLamport(context.Context, *LamportRequest) (*LamportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLamport not implemented")
}
func (UnimplementedConsensusServiceServer) JoiningQueue(context.Context, *JoiningRequest) (*JoiningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoiningQueue not implemented")
}
func (UnimplementedConsensusServiceServer) EnteringCS(context.Context, *EnteringCSRequest) (*EnteringCSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnteringCS not implemented")
}
func (UnimplementedConsensusServiceServer) ExitingCS(context.Context, *ExitingCSRequest) (*ExitingCSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitingCS not implemented")
}
func (UnimplementedConsensusServiceServer) mustEmbedUnimplementedConsensusServiceServer() {}
func (UnimplementedConsensusServiceServer) testEmbeddedByValue()                          {}

// UnsafeConsensusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServiceServer will
// result in compilation errors.
type UnsafeConsensusServiceServer interface {
	mustEmbedUnimplementedConsensusServiceServer()
}

func RegisterConsensusServiceServer(s grpc.ServiceRegistrar, srv ConsensusServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsensusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsensusService_ServiceDesc, srv)
}

func _ConsensusService_CriticalSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriticalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).CriticalSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_CriticalSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).CriticalSection(ctx, req.(*CriticalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_GetLamport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LamportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).GetLamport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_GetLamport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).GetLamport(ctx, req.(*LamportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_JoiningQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).JoiningQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_JoiningQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).JoiningQueue(ctx, req.(*JoiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_EnteringCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnteringCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).EnteringCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_EnteringCS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).EnteringCS(ctx, req.(*EnteringCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ExitingCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitingCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ExitingCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_ExitingCS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ExitingCS(ctx, req.(*ExitingCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsensusService_ServiceDesc is the grpc.ServiceDesc for ConsensusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.ConsensusService",
	HandlerType: (*ConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CriticalSection",
			Handler:    _ConsensusService_CriticalSection_Handler,
		},
		{
			MethodName: "GetLamport",
			Handler:    _ConsensusService_GetLamport_Handler,
		},
		{
			MethodName: "JoiningQueue",
			Handler:    _ConsensusService_JoiningQueue_Handler,
		},
		{
			MethodName: "EnteringCS",
			Handler:    _ConsensusService_EnteringCS_Handler,
		},
		{
			MethodName: "ExitingCS",
			Handler:    _ConsensusService_ExitingCS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/consensus.proto",
}
